import{FreeQueue as t,getConstant as e}from"../free-queue/index.mjs";import{createTestIR as a,fetchAudioFileToF32Array as o}from"./ir-helper.js";const{QUEUE_SIZE:s}=e("radio");import n from"./assets.js";import{isEmpty as r}from"../isEmpty/index.mjs";window.document.querySelector("nk-memory");const i=new t(s,2),u=new t(s,2),l=new Int32Array(new SharedArrayBuffer(1*Int32Array.BYTES_PER_ELEMENT));let c=null,d=!1,m={value:"TEST"};const p={audio:{ctx:!1,analyser:!1,waveform:!1,master:{gain:!1}},html:{scope:{canvas:!1,context:!1},button:{start:!1,radios:{this:!1,length:!1}}},player:{start:!1,stop:!1,isPlaying:!1},stream:{song:!1,source:!1,path:!1},web:{crossOrigin:"anonymous"}},h=async t=>{try{await t.stream.song.pause(),await t.audio.ctx.suspend(),t.stream.song=new Audio(t.stream.path),t.stream.source=t.audio.ctx.createMediaElementSource(t.stream.song),t.stream.song.crossOrigin="anonymous",t.stream.song.addEventListener("canplay",(async e=>(await t.audio.ctx.resume(),await t.stream.song.play(),t.html.button.start.textContent="Stop Audio",!0))),await t.stream.source.connect(t.audio.master.gain)}catch(e){return t.html.button.start.textContent="Stop Audio",!0}},y=()=>{p.html.scope.context=p.html.scope.canvas.getContext("2d"),p.html.scope.canvas.width=p.audio.waveform.length,p.html.scope.canvas.height=200,p.html.scope.context.clearRect(0,0,p.html.scope.canvas.width,p.html.scope.canvas.height),p.html.scope.context.beginPath();for(let t=0;t<p.audio.waveform.length;t++){const e=t,a=(.5+p.audio.waveform[t]/2)*p.html.scope.canvas.height;0===t?p.html.scope.context.moveTo(e,a):p.html.scope.context.lineTo(e,a)}p.audio.analyser.getFloatTimeDomainData(p.audio.waveform),p.html.scope.context.strokeStyle="#5661FA",p.html.scope.context.lineWidth=2,p.html.scope.context.stroke(),window.requestAnimationFrame(y)};export default async()=>new Promise(((t,e)=>{t(class{constructor(t){(t=>{p.html.scope.canvas=t.this.shadowRoot.querySelector("#oscilloscope"),p.html.button.start=t.this.shadowRoot.querySelector("#start"),p.html.button.radios.this=t.this.shadowRoot.querySelectorAll('input[name="radio-selection"]'),p.html.button.radios.length=p.html.button.radios.this.length})(t);for(let t=0,e=p.html.button.radios.length;t<e;t++)!0===p.html.button.radios.this[t].checked&&(p.stream.path=p.html.button.radios.this[t].value);p.stream.song=new Audio(p.stream.source);for(let t=0,e=p.html.button.radios.length;t<e;t++)p.html.button.radios.this[t].addEventListener("change",(async t=>{p.player.isPlaying&&(await p.stream.song.pause(),p.html.button.start.textContent="Start Audio",p.player.isPlaying=!p.player.isPlaying,p.stream.path=t.target.value,p.audio.ctx&&(p.player.isPlaying=!p.player.isPlaying,await h(p)))}));p.html.button.start.addEventListener("click",(async e=>{p.player.isPlaying?(await p.stream.song.pause(),p.audio.ctx.suspend(),d=!1,c.terminate(),c=null,p.html.button.start.textContent="Start Audio"):(p.html.button.start.textContent="Stop Audio",await(async t=>(t.audio.ctx||(t.audio.ctx=new window.AudioContext,console.log("sssssssssssssssssssssssssssssssssssss",new URL("../radio-processor.mjs",import.meta.url).pathname),await t.audio.ctx.audioWorklet.addModule(new URL("../free-queue/src/radio-processor.mjs",import.meta.url).pathname)),t.audio.oscillatorNode=new OscillatorNode(t.audio.ctx),t.audio.processorNode=new AudioWorkletNode(t.audio.ctx,"radio-processor",{processorOptions:{inputQueue:i,outputQueue:u,atomicState:l}}),r(c)&&(c=new Worker(new URL("../free-queue/src/worker.sync.js",import.meta.url),{name:"Radio",type:"module"})),c.onerror=t=>{console.log("[main.js] Error from worker.js: ",t)},t.audio.ctx.suspend(),t.audio.analyser=t.audio.ctx.createAnalyser(),t.audio.master.gain=t.audio.ctx.createGain(),t.audio.waveform=new Float32Array(t.audio.analyser.frequencyBinCount),await t.audio.analyser.getFloatTimeDomainData(t.audio.waveform),t.audio.master.gain.connect(t.audio.processorNode).connect(t.audio.analyser).connect(t.audio.ctx.destination),t.audio.oscillatorNode.start(),t.audio.ctx))(p),await(async t=>{if(d)return;console.assert(p.audio.ctx);let e=null,n=null;m&&(e=m.value,n="TEST"===e?a():await o(p.audio.ctx,e),m.disabled=!0),console.log("SAMPLE RATE:",p.audio.ctx.sampleRate),c.addEventListener("message",(e=>{e.data.status&&("terminate"===e.data.type?console.log("######## TERMINATE ##########"):(t.this.sharedArrayBuffer={name:"Radio",inputQueue:2*s,outputQueue:2*s,atomicState:4*Int32Array.BYTES_PER_ELEMENT,irArray:void 0,sampleRate:48e3,type:"sync"},document.dispatchEvent(new CustomEvent("free-queue",{detail:{status:!0}}))))}),{once:!0}),c.postMessage({type:"init",data:{inputQueue:i,outputQueue:u,atomicState:l,irArray:n,sampleRate:p.audio.ctx.sampleRate}}),console.log("[main.js] initializeWorkerIfNecessary(): "+e),d=!0})(t),await h(p),y()),p.player.isPlaying=!p.player.isPlaying}))}})}));