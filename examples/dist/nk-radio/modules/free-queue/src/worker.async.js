import{getConstant}from"./constants.js";import{FreeQueue}from"./free-queue.js";const{FRAME_SIZE}=getConstant(self.name.toLowerCase());let inputQueue=null,outputQueue=null,atomicState=null,gpuProcessor=null,inputBuffer=null,outputBuffer=null,irArray=null,sampleRate=null,lastCallback=0,averageTimeSpent=0,timeElapsed=0,runningAverageFactor=1;function executeLocked(e,t,a=0,o=0){!async function(){for(;"ok"===await Atomics.waitAsync(t,a,o).value;)e(),Atomics.store(t,a,0)}()}const initialize=e=>{({inputQueue,outputQueue,atomicState,irArray,sampleRate}=e),Object.setPrototypeOf(inputQueue,FreeQueue.prototype),Object.setPrototypeOf(outputQueue,FreeQueue.prototype),inputBuffer=[new Float64Array(FRAME_SIZE),new Float64Array(FRAME_SIZE)],runningAverageFactor=sampleRate/FRAME_SIZE,console.log("[worker.js] initialize",runningAverageFactor)},process=()=>{inputQueue.pull(inputBuffer,FRAME_SIZE)?(outputBuffer=inputBuffer,outputQueue.push(outputBuffer,FRAME_SIZE)||console.error("[worker.js] Pushing to outputQueue failed.")):console.error("[worker.js] Pulling from inputQueue failed.")};self.onmessage=e=>{"init"===e.data.type&&(initialize(e.data.data),self.postMessage({status:!0}),executeLocked((()=>{const e=performance.now(),t=e-lastCallback;lastCallback=e,timeElapsed+=t,process(),console.log("################# INDEX 0 #################");const a=performance.now()-e;averageTimeSpent-=averageTimeSpent/runningAverageFactor,averageTimeSpent+=a/runningAverageFactor,timeElapsed>=1e3&&(console.log(`[worker.js] process() = ${a.toFixed(3)}ms : avg = ${averageTimeSpent.toFixed(3)}ms : callback interval = ${t.toFixed(3)}ms`),timeElapsed-=1e3),Atomics.store(atomicState,0,0)}),atomicState,0,0),executeLocked((()=>{const e=performance.now(),t=e-lastCallback;lastCallback=e,timeElapsed+=t,console.log("################# INDEX 1 #################");const a=performance.now()-e;averageTimeSpent-=averageTimeSpent/runningAverageFactor,averageTimeSpent+=a/runningAverageFactor,timeElapsed>=1e3&&(console.log(`[worker.js] process() = ${a.toFixed(3)}ms : avg = ${averageTimeSpent.toFixed(3)}ms : callback interval = ${t.toFixed(3)}ms`),timeElapsed-=1e3),Atomics.store(atomicState,1,0)}),atomicState,1,0))};